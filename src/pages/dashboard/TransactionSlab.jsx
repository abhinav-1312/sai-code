import { Button, Form, message, Select, Table } from "antd";
import React, { useEffect, useState } from "react";
import FormDatePickerItem from "../../components/FormDatePickerItem";
import { apiCall, apiHeader } from "../../utils/Functions";
import axios from "axios";
import useSelection from "antd/es/table/hooks/useSelection";
import { useSelector } from "react-redux";

const { Option } = Select;

const txnType = {
null: "All",
  RN: "Return Note",
  ISN: "Issue Note",
  OGP: "Outward Gate Pass",
  IGP: "Inward Gate Pass",
  GRN: "Goods Receieved Note",
  IR: "Inspection Report",
  IRN: "Inspection Report New",
  REJ: "Rejection Note",
  ACT: "Acceptance Note",
};

const sampleData = [
    {
        txnDate: "11/12/2023",
        txnNo: 603,
        processType: "IOP",
        txnName: "IGP",
        genName: "Generated By"
    },
    {
        txnDate: "11/12/2023",
        txnNo: 603,
        processType: "IOP",
        txnName: "IGP",
        genName: "Generated By"
    },
    {
        txnDate: "11/12/2023",
        txnNo: 603,
        processType: "IOP",
        txnName: "IGP",
        genName: "Generated By"
    },
]

const columns = [
    {
        title: "Transaction Date",
        dataIndex: "txnDate"
    },
    {
        title: "Transaction No.",
        dataIndex: "id"
    },
    {
        title: "Process Type",
        dataIndex: "processType"
    },
    {
        title: "Transaction Name",
        dataIndex: "processStage"
    },
    {
        title: "Generated By",
        dataIndex: "generatedBy"
    },
]

const isnColumns = [
  {
    title: "Transaction Date",
    dataIndex: "processData",
    render: (record) => record?.genDate
},
{
    title: "Transaction No.",
    dataIndex: "processId"
},
{
    title: "Process Type",
    dataIndex: "processData",
    render: (record) => record?.type
},
{
    title: "Transaction Name",
    dataIndex: "processStage"
},
{
    title: "Generated By",
    dataIndex: "processData",
    render: (record) => record?.genName
},
]

const TransactionSlab = ({allData, txnFilters, setTxnFilters, populateTxnData, setTxnSlabData, orgId}) => {
  // const [txnFilters, setTxnFilters] = useState({
  //   txnType: null,
  //   startDate: null,
  //   endDate: null,
  //   issueNoteType: null,
  // });

  console.log("TXN FILTERS: ", txnFilters)

  const handleFilterChange = (fieldName, value) => {
    setTxnFilters(prev => {
        return {
            ...prev,
            [fieldName]: value
        }
    })
  }

  // const [filteredData, setFilteredData] = useState(null)

  const {token} = useSelector(state => state.auth)

  // const populateTxnData = async () => {
  //   try {
  //     const { data } = await axios.post(
  //       "/txns/getTxnSummary",
  //       { startDate: null, endDate: null, itemCode: null, txnType: null, orgId: orgId ? orgId : null },
  //       apiHeader("POST", token)
  //     );
  //     const { responseData } = data;
  //     setFilteredData([...responseData].reverse());
  //   } catch (error) {
  //     message.error("Error occured while fetching data. Please try again.");
  //     console.log("Populate data error.", error);
  //   }
  // };

  useEffect(()=>{
    // populateTxnData()
  }, [])

  const handleTxnReset = () => {
    setTxnFilters({
      startDate: null,
      endDate: null,
      txnType: null,
      issueNoteType: null
    })

    populateTxnData()
  }

  const handleTxnSearch = async () => {

    if(txnFilters.txnType === "ISN"){
      if(!txnFilters.startDate || !txnFilters.endDate){
        message.error("Please enter from date and to date.")
        return
      }
      if(txnFilters.issueNoteType === "IRP" || txnFilters.issueNoteType === "NIRP"){
        console.log("IRP NIRP if")
        try{
          const {responseData} = await apiCall("POST", "/getDashboardIssueNoteData", token, {startDate: txnFilters.startDate, endDate: txnFilters.endDate, type: txnFilters.issueNoteType, orgId: orgId ? orgId : null})
          setTxnSlabData(prev => {
            return {
              ...prev,
              allData: responseData ? [...responseData].reverse() : []
            }
          })
        }catch(error){
          message.error("Some error occured fetching the data.")
          console.log("Error: ", error)
        }
      }
      else{
        console.log("else")
        try{
          const {responseData} = await apiCall("POST", "/getDashboardIssueNoteData", token, {startDate: txnFilters.startDate, endDate: txnFilters.endDate, type: "IRP", orgId: orgId ? orgId : null, pendingReturn: true})
          setTxnSlabData(prev => {
            return {
              ...prev,
              allData: responseData ? [...responseData].reverse() : []
            }
          })
        }catch(error){
          message.error("Some error occured fetching the data.")
          console.log("Error: ", error)
        }
      }
    }
    else{
      console.log("TXN SUMMARY")
      try {
        const {responseData} = await apiCall("POST", "/txns/getTxnSummary", token, { startDate: txnFilters.startDate, endDate: txnFilters.endDate, txnType: txnFilters.txnType === "null" ? null : txnFilters.txnType, orgId: orgId ? orgId : null})
        // const { data } = await apiCall(
        //   "/txns/getTxnSummary",
        //   { startDate: filters.startDate, endDate: filters.endDate, txnType: filters.txnType },
        //   apiHeader("POST", token)
        // );
        // const { responseData } = data;
        setTxnSlabData(prev => {
          return {
            ...prev,
            allData: responseData ? [...responseData].reverse() : []
          }
        })
      } catch (error) {
        message.error("Error occured while fetching data. Please try again.");
        console.log("Populate data error.", error);
      }
    }
  }

  return (
    <div className="slab-content">
      <div className="filter-container">
          <Form.Item label="Transaction Type">
            <Select
              value={txnFilters.txnType}
              onChange={(value) => handleFilterChange("txnType", value)}
            >
              {Object.entries(txnType).map(([key, value]) => (
                <Option key={key} value={key}>
                  {value}
                </Option>
              ))}
            </Select>
          </Form.Item>

          {
        txnFilters.txnType === "ISN" && (
            // <div className="filter-container">
                 <Form.Item label="Process Type">
            <Select
              value={txnFilters.issueNoteType}
              onChange={(value) => handleFilterChange("issueNoteType", value)}
            >
              {/* {Object.entries(txnType).map(([key, value]) => ( */}
                <Option key={'IRP'} value={"IRP"}>
                  {"Returnable"}
                </Option>
                <Option key={'NIRP'} value={"NIRP"}>
                  {"Non Returnable"}
                </Option>
                <Option key={'pendingReturnable'} value={"pendingReturnable"}>
                  {"Pending Returnable"}
                </Option>
              {/* ))} */}
            </Select>
          </Form.Item>
          // </div>
          )
          }

          <FormDatePickerItem label="From Date" name="startDate" value={txnFilters.startDate} onChange={handleFilterChange} />
          <FormDatePickerItem label="To Date" name="endDate" value={txnFilters.endDate} onChange={handleFilterChange} />
          <Button primary style={{backgroundColor: "#ff8a00", fontWeight: "bold"}} onClick={handleTxnSearch}> Search </Button>
          <Button primary style={{fontWeight: "bold"}} onClick={handleTxnReset}> Reset </Button>
      </div>

      {/* {
        filters.txnType === "ISN" && (
            <div className="filter-container">
                 <Form.Item label="Transaction Type">
            <Select
              value={filters.issueNoteType}
              onChange={(value) => handleFilterChange("issueNoteType", value)}
            >
                <Option key={'returnable'} value={"returnable"}>
                  {"Returnable"}
                </Option>
                <Option key={'nonReturnable'} value={"nonReturnable"}>
                  {"Non Returnable"}
                </Option>
                <Option key={'pendingReturnable'} value={"pendingReturnable"}>
                  {"Pending Returnable"}
                </Option>
            </Select>
          </Form.Item>

          <FormDatePickerItem label="From Date" name="isnFromDate" value={filters.isnFromDate} onChange={handleFilterChange} />
          <FormDatePickerItem label="To Date" name="isnToDate" value={filters.isnToDate} onChange={handleFilterChange} />
          <Button primary style={{backgroundColor: "#ff8a00", fontWeight: "bold"}} onClick={handleIsnSearch}> Search </Button>
          <Button primary style={{fontWeight: "bold"}} onClick={handleIsnReset}> Reset </Button>
            </div>
        )
      } */}
      {
        allData &&
        <Table dataSource={allData} columns={txnFilters.txnType === "ISN" ? isnColumns : columns} pagination={{pageSize: 10}} />
      }
    </div>
  );
};

export default TransactionSlab;