import React, { useState } from 'react'
import {Form, Input, DatePicker, Select, Table, Button} from "antd"

const { Option } = Select;
const dateFormat = "DD/MM/YYYY";


const TransactionSummary = () => {
  const columns = [
    {
      title: "Transaction Type",
      fixed: "left"
    },
    {
      title: "Transaction No",
      fixed: "left"
    },
    {
      title: "Demand Note / IRD no"
    },
    {
      title: "Approved By"
    },
    {
      title: "Generated By"
    },
    {
      title: "Received By"
    },
    {
      title: "Returned / Submitted By"
    },
    {
      title: "Verified By"
    },
    {
      title: "View",
      id: "view",
      fixed: "right",
      render: () => (
        <Button primary> View </Button>
      )
    },
    {
      title: "Print",
      fixed: "right"
    },
  ]


  const transactionTypeList = [
    {
      id: 1,
      desc: "All"
    },
    {
      id: 2,
      desc: "Issue Note"
    },
    {
      id: 3,
      desc: "OGP"
    },
    {
      id: 4,
      desc: "IGP"
    },
    {
      id: 5,
      desc: "Return Note"
    },
    {
      id: 6,
      desc: "GRN"
    },
    {
      id: 7,
      desc: "MIS"
    },
    {
      id: 8,
      desc: "Inspection Note"
    },
    {
      id: 9,
      desc: "Acceptance Note"
    },
    {
      id: 10,
      desc: "Rejection Note"
    },
  ]

  const processTypeList = [
    {
      id: 1,
      desc: "All"
    },
    {
      id: 2,
      desc: "Issue/Return"
    },
    {
      id: 3,
      desc: "Purchase Order"
    },
    {
      id: 4,
      desc: "Inter Org Transfer"
    },
  ]

  const [formData, setFormData] = useState({
    trnNo: null,
    orgName: "",
    fromDate: null,
    toDate: null,
    transactionType: null,
    processType: null,
    itemCd: null,
    itemName: ""
  })

  const handleFormValueChange = (field, value) => {
    if(field === 'transactionType' || field === "processType"){
      console.log("Value: ", value)
      setFormData(prevValues => {
        return {
          ...prevValues,
          [field]: value.value
        }
      })
      return
    }
    setFormData(prevValues=>{
      return {
        ...prevValues,
        [field]: value
      }
    })
  }

  return (
    <>
    {/* <Button type="primary"> Button primary</Button>
    <Button type="success" style={{backgroundColor: "#3fb950", border: "#3fb950", color: "#ffffff"}}> Button primary</Button> */}
      <h1 style={{textAlign: "center"}}> Transaction Detail </h1>
      <div style={{margin: "1rem", border: "1px solid rgb(87, 202, 195)", padding: "1rem", borderRadius: "1%"}}>
        <Form style={{display: "grid", gridTemplateColumns: "repeat(2, 1fr)", gap: "1rem"}}>

          <Form.Item label="Transaction No" name="trnNo">
            <Input value={formData.trnNo} onChange={(e) => handleFormValueChange("trnNo", e.target.value)}/>
          </Form.Item>

          <Form.Item label="Organization Name" name="orgName">
            <Input value={formData.orgName} onChange={(e) => handleFormValueChange("orgName", e.target.value)}/>
          </Form.Item>

          <Form.Item label="Item Code" name="itemCd">
            <Input value={formData.itemCd} onChange={(e) => handleFormValueChange("itemCd", e.target.value)}/>
          </Form.Item>

          <Form.Item label="Item Name" name="itemName">
            <Input value={formData.itemName} onChange={(e) => handleFormValueChange("itemName", e.target.value)}/>
          </Form.Item>

          <Form.Item label="From Date" name="fromDate">
            <DatePicker
              format={dateFormat}
              style={{ width: "100%" }}
              onChange={(date, dateString) =>
                handleFormValueChange("fromDate", dateString)
              }
            />
          </Form.Item>

          <Form.Item label="To Date" name="toDate">
            <DatePicker
              format={dateFormat}
              style={{ width: "100%" }}
              onChange={(date, dateString) =>
                handleFormValueChange("toDate", dateString)
              }
            />
          </Form.Item>
          
          <Form.Item label="Transaction Type">
            <Select style={{ width: 200 }} onChange={(idx, typeDetail) => handleFormValueChange("transactionType", typeDetail)}>
              {transactionTypeList.map((option, index) => (
                <Option key={index} value={option.id}>{option.desc}</Option>
              ))}
            </Select>
          </Form.Item>

          <Form.Item label="Process Type">
            <Select style={{ width: 200 }} onChange={(idx, typeDetail) => handleFormValueChange("processType", typeDetail)}>
              {processTypeList.map((option, index) => (
                <Option key={index} value={option.id}>{option.desc}</Option>
              ))}
            </Select>
          </Form.Item>

        </Form>
      </div>

      <Table columns={columns} scroll={{ x: "max-content" }} />

    </>
  )
}

export default TransactionSummary
