import React, { useEffect, useState } from 'react'
import { apiHeader, convertArrayToObject, convertEpochToDateString, generateCsvData } from '../../../utils/Functions'
import DetailData from './DetailData'
import axios from 'axios'
import { useSelector } from 'react-redux'

const RejNoteTable = ({data, type, itemList, setCsv}) => {

    const {token} = useSelector(state => state.auth);
    const [uomObj, setUomObj] = useState({})

    const fetchUom = async () => {
        // console.log("Fetch uom called")
        const uomMasterUrl =
            "/master/getUOMMaster";
    
        try{
            const {data} = await axios.get(uomMasterUrl, apiHeader("GET", token))
            const {responseData} = data
            // console.log("Response data: ", responseData)
            
            const uomMod =  convertArrayToObject(responseData, "id", "uomName")

            setUomObj({...uomMod})
    
        }
        catch(error){
            console.log("Error")
        }
    }

    useEffect(()=>{
        fetchUom()
        const csvData = generateCsvData("Rejection Note", dataColumnsUpdated, data, itemListColumn, itemList)
        setCsv(csvData)
    }, [])

    const itemDetails = [
        {
            title: "Item Code",
            dataIndex: "itemCode"
        },
        {
            title: "Item Description",
            dataIndex: "itemDesc"
        },
        {
            title: "Uom Description",
            dataIndex: "uom",
            render: (uom) => uomObj[parseInt(uom)]
        },
    ]  
    
    const supplierDetails = [
        {
            title: "Supplier Code",
            dataIndex: "supplierCd" || "supplierCode"
        },
        {
            title: "Supplier Name",
            dataIndex: "supplierName"
        },
        {
            title: "Supplier Address",
            dataIndex: "crAddress"
        }
    ]

    const orgConsignorDetails = [
        {
            title: "Consignor Regional Center Code",
            dataIndex: "crRegionalCenterCd"
        },
        {
            title: "Consignor Regional Center Name",
            dataIndex: "crRegionalCenterName"
        },
        {
            title: "Consignor Address",
            dataIndex: "crAddress"
        },
        {
            title: "Consignor Zipcode",
            dataIndex: "crZipcode"
        }
    ]
    const orgConsigneeDetails = [
        {
            title: "Consignee Regional Center Code",
            dataIndex: "ceRegionalCenterCd"
        },
        {
            title: "Consignee Regional Center Name",
            dataIndex: "ceRegionalCenterName"
        },
        {
            title: "Consignee Address",
            dataIndex: "ceAddress"
        },
        {
            title: "Consignee Zipcode",
            dataIndex: "ceZipcode"
        }
    ]

    const dataColumns = [
        {
            title: "Rejection Note No.",
            dataIndex: "processId"
        },
        {
            title: "Rejection Note Date",
            dataIndex: "acptRejNoteDT"
        },
        {
            title: "Process Type",
            dataIndex: "type"
        },
        {
            title: "Inspection Note No.",
            dataIndex: "processId"
        },
        {
            title: "Generated By",
            dataIndex: "genName"
        },
        {
            title: "Generation Date",
            dataIndex: "genDate"
        },
        ...orgConsigneeDetails
    ]

    const poExtraColumns = [
        {
            title: "NOA No.",
            dataIndex: "noa"
        },
        {
            title: "NOA Date",
            dataIndex: "noaDate",
            render: (date) => convertEpochToDateString(date)
        },
        {
            title: "Date Of Delivery",
            dataIndex: "dateOfDelivery",
        },
        ...supplierDetails
    ]

    const interOrgExtraColumns = [...orgConsignorDetails, 
        {
            title: "Condition of Goods",
            dataIndex: "conditionOfGoods"
        },
        {
            title: "Note",
            dataIndex: "note"
        },
    ]

    

    const itemListColumn = [
        ...itemDetails,
        {
            title: "Rejected Quantity",
            dataIndex: "rejectedQuantity"
        },
        {
            title: "Remarks",
            dataIndex: "remarks"
        }
    ]

    const dataColumnsUpdated = type === "PO" ? [...dataColumns, ...poExtraColumns]  : [...dataColumns, ...interOrgExtraColumns]

  return (
    <DetailData dataColumn={dataColumnsUpdated} itemListColumn={itemListColumn} data={data} itemList={itemList}/>
  )
}

export default RejNoteTable
